else if (_clients_map.count(fd))
				{
					readRequest(fd, _clients_map[fd]);
					if (_clients_map[fd].response.getCgiFlag())
					{
						// Add pipe_out[0] (read end of the pipe) to the epoll interest list

						// struct epoll_event cgi_event_out;
						// cgi_event_out.events = EPOLLIN;  // EPOLLIN for read events
						// cgi_event_out.data.fd = _clients_map[fd].response.cgi_object.cgi_pipe_out_read_end;  // The file descriptor to monitor

						// if (epoll_ctl(_epoll_fd, EPOLL_CTL_ADD, _clients_map[fd].response.cgi_object.cgi_pipe_out_read_end, &cgi_event_out) == -1)
						// {
						// 	perror("epoll_ctl");
						// 	// close(pipe_stdin);
						// 	// close(pipe_out[0]);
						// 	// close(pipe_out[1]);
						// 	// error_code = 500;
						// 	return ;
						// }

						_addToEpoll(_clients_map[fd].response.cgi_object.cgi_pipe_in_write_end, EPOLLOUT);
						_addToEpoll(_clients_map[fd].response.cgi_object.cgi_pipe_out_read_end, EPOLLIN);
						// struct epoll_event cgi_event_in;
						// cgi_event_in.events = EPOLLOUT;  // EPOLLIN for read events
						// cgi_event_in.data.fd = _clients_map[fd].response.cgi_object.cgi_pipe_in_write_end;  // The file descriptor to monitor

						// if (epoll_ctl(_epoll_fd, EPOLL_CTL_ADD, _clients_map[fd].response.cgi_object.cgi_pipe_in_write_end, &cgi_event_in) == -1)
						// {
						// 	perror("epoll_ctl");
						// 	// Handle error
						// 	return ;
						// }
						Log::Msg(DEBUG, FUNC + "write end of CGI pipe in added to epoll interest list: " + toString(_clients_map[fd].response.cgi_object.cgi_pipe_in_write_end));
						Log::Msg(DEBUG, FUNC + "read end of CGI pipe in added to epoll interest list: " + toString(_clients_map[fd].response.cgi_object.cgi_pipe_out_read_end));


						Log::Msg(DEBUG, FUNC + "pipe fd added to client fd map : " + toString(_clients_map[fd].response.cgi_object.cgi_pipe_out_read_end));
						Log::Msg(DEBUG, FUNC + "pipe fd added to client fd map : " + toString(_clients_map[fd].response.cgi_object.cgi_pipe_in_write_end));

						_cgi_pipe_to_client_map.insert(std::make_pair(_clients_map[fd].response.cgi_object.cgi_pipe_out_read_end, fd));
						_cgi_pipe_to_client_map.insert(std::make_pair(_clients_map[fd].response.cgi_object.cgi_pipe_in_write_end, fd));
					
						std::map<int, int>::const_iterator it;
						for (it = _cgi_pipe_to_client_map.begin(); it != _cgi_pipe_to_client_map.end(); ++it)
						{
						int key = it->first;
						int value = it->second;
						std::cout << "Key: " << toString(key) << ", Value: " << toString(value) << std::endl;
   						}
						
					}